{%- comment -%}

Instructions:

1. Add this file to your sections folder

{% endcomment %}

{%- style -%}

  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }
  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }

{%- endstyle -%}

{%- liquid 
            
assign fetch_priority = 'auto'
if section.index == 1
    assign fetch_priority = 'high'
endif

assign image_blocks = section.blocks | where: 'type', 'image'
assign widths = '375, 550, 750, 800, 1100, 1500, 1780, 2048, 3000, 3840'
assign image_class = 'tw-w-full tw-h-auto tw-object-cover'

-%}

<section class="section-{{ section.id }}-padding gradient color-{{ section.settings.content_color_scheme }}">

  {% for block in section.blocks %}
    {%  case block.type  %}  
    {%  when 'image' %}
      {% if block.settings.link != blank %}
      <a href="{{ block.settings.link }}" class="tw-block tw-w-full tw-h-full">
      {% endif %}
        <div class="tw-relative">
          <picture>
            {% if block.settings.image_desktop != blank %}
              <div class="tw-full-image-desktop {% if block.settings.image_mobile != blank %} max-[989px]:tw-hidden {% endif %}">
                {{ block.settings.image_desktop | image_url: width: 2048 | image_tag: class: image_class, alt: block.settings.image_desktop.alt, widths: widths, fetchpriority: fetch_priority }}
              </div>
              {% if block.settings.image_mobile != blank %}
                <div class="tw-full-image-mobile tw-hidden max-[989px]:tw-block">
                  {{ block.settings.image_mobile| image_url: width: 800 | image_tag: class: image_class, alt: block.settings.image_mobile.alt, widths: widths, fetchpriority: fetch_priority }}
                </div>
              {% endif %}
            {% else %}
              {{ 'hero-apparel-1' | placeholder_svg_tag: 'placeholder-svg' }}
            {% endif %}
          </picture>
          <div class="tw-absolute tw-top-0 tw-bottom-0 tw-left-0 tw-w-full">
            <div class="tw-sticky tw-top-0 tw-z-[1] tw-h-full tw-max-h-screen">
              <div class="tw-flex tw-items-center tw-h-full lg:tw-items-end ">
                <div class="tw-sticky lg:tw-static tw-top-[calc(50%_-_0.5em_*_1.02)] tw-text-left tw-w-full tw-z-30 tw-pointer-events-none tw-p-[1rem] md:tw-p-[5rem] max-[640px]:!tw-pb-[2rem] gradient color-{{ block.settings.content_color_scheme }}">
                  {% if block.settings.heading != blank %}
                    {% style %}
                      .h2-{{ block.id }} {
                        font-size: {{ block.settings.heading_size }}px;
                        line-height: {{ block.settings.heading_size }}px;
                      }
                      .h3-{{ block.id }} {
                        font-size: {{ block.settings.subheading_size }}px;
                        line-height: {{ block.settings.subheading_size }}px;
                        margin-top: 1rem;
                        margin-left: 1rem;
                      }
                      @media screen and (max-width: 989px) {
                        .h2-{{ block.id }} {
                          font-size: calc({{ block.settings.heading_size }}px * 0.5);
                          line-height: calc({{ block.settings.heading_size }}px * 0.5);
                        }
                        .h3-{{ block.id }} {
                          font-size: calc({{ block.settings.subheading_size }}px * 0.5);
                          line-height: calc({{ block.settings.subheading_size }}px * 0.5);
                        }
                      }
                      @media screen and (max-width: 640px) {
                        .h2-{{ block.id }} {
                          font-size: calc({{ block.settings.heading_size }}px * 0.2);
                          line-height: calc({{ block.settings.heading_size }}px * 0.2);
                        }
                        .h3-{{ block.id }} {
                          font-size: calc({{ block.settings.subheading_size }}px * 0.2);
                          line-height: calc({{ block.settings.subheading_size }}px * 0.2);
                          margin-left: .5rem;
                        }
                      }
                    {% endstyle %}
                    <h2 class="h2-{{ block.id }} tw-font-bold tw-mask-text tw-leading-[1.02] tw-text-white/80 supports-[mask-clip:text]:tw-text-transparent supports-[mask-clip:text]:tw-bg-white/50 supports-[mask-clip:text]:tw-backdrop-blur-md tw-text-left tw-w-full">{{ block.settings.heading }}</h2>
                    <h3 class="h3-{{ block.id }} tw-mask-text tw-text-white/80 supports-[mask-clip:text]:tw-text-transparent supports-[mask-clip:text]:tw-bg-white/50 supports-[mask-clip:text]:tw-backdrop-blur-md tw-text-left tw-w-full"">{{ block.settings.subheading }}</h3>
                  {% endif %}
                </div>
              </div>
            </div>
          </div>
        </div>
      {% if block.settings.link != blank %}
      </a>
      {% endif %}
    {%  when 'video' %}
      {% if block.settings.video != blank %}
        <div class="tw-relative">

          {% assign chrome_video = "chrome-video-" | append: block.id %}
          {% assign safari_video = "safari-video-" | append: block.id %}
          {% if block.settings.link != blank %}
          <a href="{{ block.settings.link }}" class="!tw-block tw-w-full tw-h-full tw-absolute tw-top-0 tw-left-0 tw-z-[2]"></a>
          {% endif %}
            {{
              block.settings.video | video_tag:
              image_size: '800',
              autoplay: true,
              loop: true,
              controls: false,
              muted: true,
              id: chrome_video,
              class: "tw-w-full tw-h-full tw-object-cover tw-object-center"
            }}
            {{
              block.settings.video | video_tag:
              image_size: '800',
              autoplay: true,
              loop: true,
              controls: false,
              muted: true,
              id: safari_video,
              class: "tw-w-full tw-h-full tw-object-cover tw-object-center" | 
              replace: '<video', '<picture' | 
              replace: '</video', '</picture' | 
              replace: '<source src', '<source srcset'
            }}
          <script>

            // (function () {
            //   const userAgentForVideo = navigator.userAgent.toLowerCase();
            //   console.log('Current UserAgent:', userAgentForVideo);
              
            //   const chromeVideo = document.getElementById("{{ chrome_video }}");
            //   const safariVideo = document.getElementById("{{ safari_video }}");
              
            //   const isSafari = () => {
            //     const isChrome = /chrome|chromium|crios/i.test(userAgentForVideo);
            //     const isSafari = /safari/i.test(userAgentForVideo);
            //     return isSafari && !isChrome;
            //   };
              
            //   if (safariVideo) {
            //     const safariVideoImg = safariVideo.querySelector("img");
            //     if (safariVideoImg) {
            //       const classes = safariVideo.getAttribute("class");
            //       if (classes) {
            //         classes.split(" ").forEach(className => {
            //           safariVideoImg.classList.add(className);
            //         });
            //       }
            //     }
            //   }
              
            //   if (isSafari()) {
            //     console.log('Safari detected - showing video Safari version');
            //     if (safariVideo) safariVideo.style.display = "block";
            //     if (chromeVideo) {
            //       chromeVideo.style.display = "none";
            //       chromeVideo.style.visibility = 'hidden';
            //     }
            //   } else {
            //     console.log('Non-Safari browser detected - showing video Chrome version');
            //     if (safariVideo) {
            //       safariVideo.style.display = "none";
            //       safariVideo.style.visibility = 'hidden';
            //     }
            //     if (chromeVideo) {
            //       chromeVideo.style.display = "block";
            //       chromeVideo.play().catch(error => {
            //         console.warn('Auto-play failed:', error);
            //       });
            //     }
            //   }
            // })();

            // Immediately Invoked Function Expression (IIFE) to avoid polluting global scope
            (function () {
              // Get the user's browser information and convert to lowercase for consistent comparison
              const userAgentForVideo = navigator.userAgent.toLowerCase();
              // Log the user agent string for debugging purposes
              console.log('Current UserAgent:', userAgentForVideo);
              
              // Get references to video elements for Chrome and Safari versions using template variables
              const chromeVideo = document.getElementById("{{ chrome_video }}");
              const safariVideo = document.getElementById("{{ safari_video }}");
              
              // Function to detect if the browser is Safari
              const isSafari = () => {
                // Check if Chrome is present in user agent (includes Chrome variants)
                const isChrome = /chrome|chromium|crios/i.test(userAgentForVideo);
                // Check if Safari is present in user agent
                const isSafari = /safari/i.test(userAgentForVideo);
                // Return true only if Safari is detected and Chrome is not (Safari includes Chrome in UA)
                return isSafari && !isChrome;
              };
              
              // If Safari video element exists
              if (safariVideo) {
                // Find the img element within the Safari video container
                const safariVideoImg = safariVideo.querySelector("img");
                if (safariVideoImg) {
                  // Get classes from the parent container
                  const classes = safariVideo.getAttribute("class");
                  if (classes) {
                    // Copy all classes from parent to the img element
                    classes.split(" ").forEach(className => {
                      safariVideoImg.classList.add(className);
                    });
                  }
                }
              }
              
              // Check if browser is Safari
              if (isSafari()) {
                // Log browser detection for debugging
                console.log('Safari detected - showing video Safari version');
                // Show Safari video if it exists
                if (safariVideo) safariVideo.style.display = "block";
                // Hide Chrome video if it exists
                if (chromeVideo) {
                  chromeVideo.style.display = "none";
                  chromeVideo.style.visibility = 'hidden';
                }
              } else {
                  // Log browser detection for debugging
                  console.log('Non-Safari browser detected - showing video Chrome version');
                  // Hide Safari video if it exists
                  if (safariVideo) {
                    safariVideo.style.display = "none";
                    safariVideo.style.visibility = 'hidden';
                  }
                  // Show and play Chrome video if it exists
                  if (chromeVideo) {
                    chromeVideo.style.display = "block";
                    // Attempt to autoplay the video and catch any errors
                    chromeVideo.play().catch(error => {
                      console.warn('Auto-play failed:', error);
                    });
                  }
              }
            })();

          </script>

          <div class="tw-absolute tw-top-0 tw-bottom-0 tw-left-0 tw-w-full">
            <div class="tw-sticky tw-top-0 tw-z-[1] tw-h-full tw-max-h-screen">
              <div class="tw-flex tw-items-center tw-h-full lg:tw-items-end ">
                <div class="tw-sticky lg:tw-static tw-top-[calc(50%_-_0.5em_*_1.02)] tw-text-left tw-w-full tw-z-30 tw-pointer-events-none tw-p-[1rem] md:tw-p-[5rem] max-[640px]:!tw-pb-[2rem] gradient color-{{ block.settings.content_color_scheme }}">
                  {% if block.settings.heading != blank %}
                    {% style %}
                      .h2-{{ block.id }} {
                        font-size: {{ block.settings.heading_size }}px;
                        line-height: {{ block.settings.heading_size }}px;
                      }
                      .h3-{{ block.id }} {
                        font-size: {{ block.settings.subheading_size }}px;
                        line-height: {{ block.settings.subheading_size }}px;
                        margin-top: 1rem;
                        margin-left: 1rem;
                      }
                      @media screen and (max-width: 989px) {
                        .h2-{{ block.id }} {
                          font-size: calc({{ block.settings.heading_size }}px * 0.5);
                          line-height: calc({{ block.settings.heading_size }}px * 0.5);
                        }
                        .h3-{{ block.id }} {
                          font-size: calc({{ block.settings.subheading_size }}px * 0.5);
                          line-height: calc({{ block.settings.subheading_size }}px * 0.5);
                        }
                      }
                      @media screen and (max-width: 640px) {
                        .h2-{{ block.id }} {
                          font-size: calc({{ block.settings.heading_size }}px * 0.2);
                          line-height: calc({{ block.settings.heading_size }}px * 0.2);
                        }
                        .h3-{{ block.id }} {
                          font-size: calc({{ block.settings.subheading_size }}px * 0.2);
                          line-height: calc({{ block.settings.subheading_size }}px * 0.2);
                          margin-left: .5rem;
                        }
                      }
                    {% endstyle %}
                   <h2 class="h2-{{ block.id }} tw-font-bold tw-mask-text tw-leading-[1.02] tw-text-white/80 supports-[mask-clip:text]:tw-text-transparent supports-[mask-clip:text]:tw-bg-white/50 supports-[mask-clip:text]:tw-backdrop-blur-md tw-text-left tw-w-full">{{ block.settings.heading }}</h2>
                   <h3 class="h3-{{ block.id }} tw-mask-text tw-text-white/80 supports-[mask-clip:text]:tw-text-transparent supports-[mask-clip:text]:tw-bg-white/50 supports-[mask-clip:text]:tw-backdrop-blur-md tw-text-left tw-w-full"">{{ block.settings.subheading }}</h3>
                 
                  {% endif %}
                </div>
              </div>
            </div>
          </div>
        </div>
      {% endif %}
    {% endcase %}
  {% endfor %}

</section>

{% schema %}
{
    "name": "Full image/video w/ text",
    "settings": [
        {
          "type": "color_scheme",
          "id": "section_color_scheme",
          "label": "Color scheme",
          "default": "scheme-1"
        },
        {
          "type": "range",
          "id": "padding_top",
          "min": 0,
          "max": 100,
          "step": 4,
          "unit": "px",
          "label": "Padding top",
          "default": 12
        },
        {
          "type": "range",
          "id": "padding_bottom",
          "min": 0,
          "max": 100,
          "step": 4,
          "unit": "px",
          "label": "Padding bottom",
          "default": 12
        }
    ],
    "blocks": [
      {
        "type": "image",
        "name": "Image",
        "limit": 1,
        "settings": [
          {
            "type": "image_picker",
            "id": "image_desktop",
            "label": "Image desktop",
            "info": "Use portrait image and high resolution (2048 × 2560) for better layout"
          },
          {
            "type": "image_picker",
            "id": "image_mobile",
            "label": "Image moible",
             "info": "Use portrait image and high resolution (800 × 1400) for better layout"
          },
          {
            "type": "text",
            "id": "heading",
            "label": "Heading",
            "default": "Heading"
          },
          {
            "type":"range",
            "id":"heading_size",
            "min":10,
            "max":1000,
            "step":10,
            "unit":"px",
            "label":"Heading size",
            "default":30
          },
          {
            "type": "text",
            "id": "subheading",
            "label": "Subheading",
            "default": "Subheading"
          },
          {
            "type": "range",
            "id": "subheading_size",
            "min":10,
            "max":1000,
            "step":10,
            "unit": "px",
            "label": "Subheading size",
            "default": 20
          },
          {
            "type": "url",
            "id": "link",
            "label": "Block link"
          },
          {
            "type": "color_scheme",
            "id": "content_color_scheme",
            "label": "Color scheme",
            "default": "scheme-1"
          }
        ]
      },
      {
        "type": "video",
        "name": "Video",
        "limit": 1,
        "settings": [
          {
            "type": "paragraph",
            "content": "Use portrait video for better layout"
          },
          {
            "type": "video",
            "id": "video",
            "label": "Video",
            "info": "Use portrait video (800 × 1400) for better layout"
          },
          {
            "type": "text",
            "id": "heading",
            "label": "Heading",
            "default": "Heading"
          },
          {
            "type":"range",
            "id":"heading_size",
            "min":10,
            "max":1000,
            "step":10,
            "unit":"px",
            "label":"Heading size",
            "default":30
          },
          {
            "type": "text",
            "id": "subheading",
            "label": "Subheading",
            "default": "Subheading"
          },
          {
            "type": "range",
            "id": "subheading_size",
            "min":10,
            "max":1000,
            "step":10,
            "unit": "px",
            "label": "Subheading size",
            "default": 20
          },
          {
            "type": "url",
            "id": "link",
            "label": "Block link"
          },
          {
            "type": "color_scheme",
            "id": "content_color_scheme",
            "label": "Color scheme",
            "default": "scheme-1"
          }
        ]
      }
    ],
    "presets": [
        {
          "name": "Full image/video w/ text",
          "blocks": [
            {
              "type": "image"
            }
          ]
        }
    ]
}
{% endschema %}