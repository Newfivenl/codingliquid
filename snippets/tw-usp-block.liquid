<style>
    .twUSPBlock-dialog {
        padding: 2rem;
        border-radius: 8px;
        border: none;
        box-shadow: 0 0 10px rgba(0,0,0,0.3);
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
        max-width: 50rem;
        width: 90%;
        overflow: unset;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .twUSPBlock-dialog::backdrop {
        background: rgba(0, 0, 0, 0.6);
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
    }

    .twUSPBlock-dialog.twUSPBlock-fade-in {
        opacity: 1;
    }

    .twUSPBlock-dialog.twUSPBlock-fade-in::backdrop {
        opacity: 1;
    }

    .twUSPBlock-fade-out {
        opacity: 0 !important;
    }

    .twUSPBlock-dialog.twUSPBlock-fade-out::backdrop {
        opacity: 0 !important;
    }

    .twUSPBlock-close-button {
        display: inline-block;
        padding: 0;
        min-width: 2.4rem;
        min-height: 1.4rem;
        box-shadow: 0 0 0 .2rem rgba(var(--color-button), 0);
        position: absolute;
        top: 15px;
        right: 15px;
        color: rgb(var(--color-foreground));
        background-color: transparent;
        border: none;
        cursor: pointer;
    }
</style>

{% liquid 
    assign block_id = block.id 
    assign tw_usp_text = block.settings.tw_usp_text 
    assign tw_usp_icon_svg = block.settings.tw_usp_icon_svg 
    assign tw_usp_icon_svg = block.settings.tw_usp_icon_svg_2 
    assign tw_usp_page_content = block.settings.tw_usp_page_content
    
    assign count_usp = count_usp
    assign cursor_auto = cursor_auto

    if tw_usp_page_content != blank 
        capture cursor_auto
            echo 'cursor-auto'
        endcapture 
    endif
%}

<div class="usp-block !nf-m-0">
    {% assign count_usp = count_usp | plus: 1 %}
    <div id="usp_product__item-{{count_usp}}" class="nf-flex nf-relative nf-items-center usp_product__item" block-id="{{ block.id }}" count_usp="{{count_usp}}">
        {%- if tw_usp_icon_svg -%}
            <span class="first:nf-contents [&>svg]:nf-max-w-[20px] [&>svg]:nf-h-[20px] [&>svg]:nf-w-full [&>svg]:nf-fill-[#80807E]">{{ tw_usp_icon_svg }}</span>
        {%- endif -%}
        <span id="showDialog-{{ block.id }}" class="nf-flex {{- cursor_auto -}} cursor-pointer">
            <span class="nf-ml-[10px]" style="font-size: {{usp_product_font_size}}px;">{{ tw_usp_text }}</span>
            {%- if tw_usp_icon_svg_2 -%}
                <span class="nf-ml-[10px]">{{ tw_usp_icon_svg_2 }}</span>   
            {%- endif -%}
        </span>
    </div> 
</div>

<script>
    // Check for dialog support
if (typeof HTMLDialogElement !== 'function') {
    console.warn('Dialog element not supported in this browser');
}

document.addEventListener('DOMContentLoaded', function() {
    const twUSPBlockDialog = document.getElementById('twUSPBlock-dialog');
    const closeButton = document.querySelector('.twUSPBlock-close-button');
    
    if (closeButton) {
        closeButton.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            closeTwUSPBlockDialog();
        });
    }
    if (!twUSPBlockDialog) {
        console.error('Dialog element not found');
        return;
    }

    function openTwUSPBlockDialog() {
        console.log('Opening dialog...');
        const focusableElements = twUSPBlockDialog.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
        const originalTabIndexes = new Map();

        focusableElements.forEach(el => {
            originalTabIndexes.set(el, el.getAttribute('tabindex'));
            el.setAttribute('tabindex', '-1');
        });

        twUSPBlockDialog.showModal();
        twUSPBlockDialog.setAttribute('tabindex', '-1');
        twUSPBlockDialog.focus();

        requestAnimationFrame(() => {
            requestAnimationFrame(() => {
                twUSPBlockDialog.classList.add('twUSPBlock-fade-in');
            });
        });
    }

    function closeTwUSPBlockDialog() {
        console.log('Closing dialog...');
        if (!twUSPBlockDialog) return;
        
        twUSPBlockDialog.classList.remove('twUSPBlock-fade-in');
        twUSPBlockDialog.classList.add('twUSPBlock-fade-out');
        
        const handleTransitionEnd = () => {
            twUSPBlockDialog.close();
            twUSPBlockDialog.classList.remove('twUSPBlock-fade-out');
            twUSPBlockDialog.removeAttribute('tabindex');
            // Restore focusable elements
            const focusableElements = twUSPBlockDialog.querySelectorAll('button, [href], input, select, textarea, [tabindex]');
            focusableElements.forEach(el => {
                el.removeAttribute('tabindex');
            });
        };

        twUSPBlockDialog.addEventListener('transitionend', handleTransitionEnd, { once: true });
    }

    // Close dialog when clicking outside
    twUSPBlockDialog.addEventListener('click', (e) => {
        const dialogDimensions = twUSPBlockDialog.getBoundingClientRect();
        if (
            e.clientX < dialogDimensions.left ||
            e.clientX > dialogDimensions.right ||
            e.clientY < dialogDimensions.top ||
            e.clientY > dialogDimensions.bottom
        ) {
            closeTwUSPBlockDialog();
        }
    });

    // Handle ESC key
    twUSPBlockDialog.addEventListener('cancel', (e) => {
        e.preventDefault();
        closeTwUSPBlockDialog();
    });

    // Prevent any focusin events when dialog opens
    twUSPBlockDialog.addEventListener('focusin', (e) => {
        if (!twUSPBlockDialog.classList.contains('twUSPBlock-fade-in')) {
            e.preventDefault();
            twUSPBlockDialog.focus();
        }
    });

    // Set up click handlers for all trigger elements
    document.querySelectorAll('[id^="showDialog-"]').forEach(trigger => {
        trigger.addEventListener('click', () => {
            console.log('Trigger clicked');
            openTwUSPBlockDialog();
        });
    });
});
</script>

<dialog id="twUSPBlock-dialog" class="twUSPBlock-dialog">
    Content
    <button class="twUSPBlock-button twUSPBlock-close-button">
        <svg
        xmlns="http://www.w3.org/2000/svg"
        aria-hidden="true"
        focusable="false"
        class="icon icon-close"
        fill="none"
        viewBox="0 0 18 17"
        >
        <path d="M.865 15.978a.5.5 0 00.707.707l7.433-7.431 7.579 7.282a.501.501 0 00.846-.37.5.5 0 00-.153-.351L9.712 8.546l7.417-7.416a.5.5 0 10-.707-.708L8.991 7.853 1.413.573a.5.5 0 10-.693.72l7.563 7.268-7.418 7.417z" fill="currentColor">
        </svg>
    </button>
</dialog>