{% comment %}

1. Add this schema field to header.liquid
{
    "type": "text",
    "id": "tw_menu",
    "default": "main-menu",
    "label": "TW - main menu",
    "info": "Enter your menu's handle to activate it - you can find this handle by clicking on your menu. For example: main-menu. Leave empty to deactivate."
},

add this to block header.liquid
{
    "type": "tw_menu_image",
    "name": "TW - menu image",
    "limit": 6,
        "settings": [
        {
            "type": "text",
            "id": "tw_title",
            "label": "Image title"
        },
        {
            "type": "url",
            "id": "tw_title_link",
            "label": "Title link"
        },
        {
            "type": "image_picker",
            "id": "tw_image",
            "label": "Image"
        }
    ]
}

2. Locate and update the code in header.liquid in sections folder
if section.settings.menu != blank
    if section.settings.tw_menu != blank
        render 'tw-main-menu', section: section
    else 
        render 'header-drawer'
    endif
endif

{% endcomment %}

{%- style -%}
    
    :root {
        --tw-dialog-animation-duration: 0.5s;
        --tw-dialog-timing: cubic-bezier(.4,0,.2,1);
        --tw-dialog-backdrop-opacity: 0.8;
        --tw-dialog-height: 100%; 
        --tw-dialog-width: 580px;
        --tw-dialog-padding: 30px;
        --vh: 8.96px;
    }

    .tw-dialog-content *:focus-visible {
        outline: none;
        box-shadow: none;
    }

    .tw-dialog-content {
        width: var(--tw-dialog-width);
        max-width: 100%;
        margin-top: 0;
        height: 100%;
        max-height: 100%;
        top: 0;
        border: 0;
        transition: all 0.3s ease-in-out;
        left: calc(100vw - 484px);
        margin-right: 0;
        overflow: initial;
    }

    .tw-dialog-content::backdrop {
        position: fixed;
        inset: 0;
        background-color: rgb(0 0 0);
        opacity: var(--tw-dialog-backdrop-opacity);
    }

    .tw-dialog-content[open] {
        animation: var(--tw-dialog-animation-duration) var(--tw-dialog-timing) normal;
    }

    .tw-dialog-content.hide {
        animation: var(--tw-dialog-animation-duration) var(--tw-dialog-timing) normal;
    }

    .tw-dialog-content.vertical-animation[open] {
        animation-name: vertical-show;
    }

    .tw-dialog-content.vertical-animation.hide {
        animation-name: vertical-hide;
    }

    dialog.vertical-animation {
        width: 100%;
        max-width: 100%;
        height: var(--tw-dialog-height);
        /* max-height: calc(var(--vh,1vh)*90); */
        max-height: 80%;
        left: 0;
        bottom: 0;
        top: auto !important;
    }

    @keyframes vertical-show {
        from { transform: translateY(110%); }
        to { transform: translateY(0); }
    }

    @keyframes vertical-hide {
        from { transform: translateY(0); }
        to { transform: translateY(110%); }
    }

    @media screen and (max-width: 767px) {
        .tw-dialog-content {
        max-width: 100%;
        right: 0;
        left: auto;
        }
    }

    .tw-dialog-button {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 10px;
        border: none;
        cursor: pointer;
    }

    .tw-dialog-button svg {
        width: 10px;
        height: 10px;
    }

    .tw-menu-icons {
        display: flex;
        align-items: center;
    }


    @media screen and (min-width: 990px) {
        .tw-main-menu {
            display: none;
        }
    }

    .tw-dialog-content {
        will-change: transform;
        backface-visibility: hidden;
        transform: translateZ(0);
    }

    .no-scrollbar::-webkit-scrollbar {
        display: none;
    }

    .no-scrollbar {
        -ms-overflow-style: none; 
        scrollbar-width: none; 
    }

    .tw-dialog-handle {
        width: 5rem;
        height: 6px;
        background-color: #ffffff4d;
        border-radius: 2px;
        margin: 8px auto;
        cursor: grab;
        position: relative;
        display: block !important;
    }

    .tw-dialog-handle-container {
        width: 100%;
        height: 20px;
        display: flex;
        justify-content: center;
        align-items: center;
        background: transparent;
        position: absolute;
        top: -21px;
        z-index: 9999;
        z-index: 10;
        touch-action: none;
    }

{%- endstyle -%}

{% liquid 
    assign dialog_id = dialog_id | plus: 1
    assign trigger_id = trigger_id | plus: 1
    assign count_tab = count_tab |  plus: 1
%}

<div class="tw-main-menu tw:min-[990px]:hidden">
    <div class="tw-menu-icons" section-id="{{ section.id }}" trigger-id="{{ trigger_id }}">
        <span id="showDialog-{{ section.id }}">
            <span data-icon="hamburger" class="tw:[&>svg]:h-8 tw:[&>svg]:w-8 tw:[&>svg]:fill-none tw:[&>svg]:align-middle tw:inline-block">
                {{- 'icon-hamburger.svg' | inline_asset_content -}}
            </span>
            <span data-icon="close" class="tw:[&>svg]:h-8 tw:[&>svg]:w-8 tw:[&>svg]:fill-none tw:[&>svg]:align-middle tw:hidden">
                {{- 'icon-close.svg' | inline_asset_content -}}
            </span>
        </span>
    </div>
    <dialog id="tw-dialog-content-{{ section.id }}-{{dialog_id}}" class="tw:w-[580px] tw:mt-0! tw:h-full tw:max-h-full tw:top-0 tw:border-0 tw:transition tw:ease-in-out tw:duration-300 tw:left-[calc(100vw-484px)] tw:mr-0 tw:max-sm:max-w-full tw:max-sm:right-0 tw:max-sm:left-auto tw-dialog-content vertical-animation gradient color-{{ section.settings.tw_menu_color_scheme }}" dialog_id="{{dialog_id}}" close>
        <div class="tw-dialog-handle-container">
            <div class="tw-dialog-handle"></div>
        </div>
        <div class="tw-menu-tabs-container tw:w-full tw:h-full tw:overflow-hidden">
            <div class="tw-tab-btn-container tw:relative tw:flex tw-justify-space-evenly tw:relative tw:w-full tw:overflow-x-hidden">
                {%- for link in section.settings.menu.links -%}
                    {% assign tab_id = link.handle | append: '-' | append: count_tab | append: '-' | append: forloop.index0 %}
                    <button 
                        class="tw-menu-tab-btn tw:cursor-pointer tw:py-[10px] tw:px-[20px] tw:basis-full"
                        data-tab="tab-{{ tab_id }}" tab-index="-1">
                        {{ link.title | escape }}
                    </button>
                   
                {%- endfor -%}
            </div>
            <div class="tw-tab-contents tw:w-full tw:h-full tw:overflow-auto tw:scroll-smooth no-scrollbar">
                <div class="tw-tabs-content-wrapper tw:w-full tw:flex tw:overflow-auto tw:overscroll-none tw:snap-both tw:snap-mandatory tw:scroll-smooth no-scrollbar">
                   

                    {%- for link in section.settings.menu.links -%}
                        <div class="tw-tabs-content-link-list tw:w-full tw:snap-center">
                            {% assign tab_id = link.handle | append: '-' | append: count_tab | append: '-' | append: forloop.index0 %}
                            <div id="tab-{{ tab_id }}" class="tw-menu-tab-content tw:w-full tw:h-full tw:flex tw:flex-col">
                                {%- if link.links != blank -%}
                                    <ul class="tw:list-none tw:p-0 tw:m-0 tw:w-full tw:h-full tw:flex-1 tw:columns-2 tw:px-[20px] tw:py-5" role="list">
                                    {% for childlink in link.links %}
                                        <li class="">
                                        <div class="tw:py-4 tw:px-1 tw:break-inside-avoid">
                                            <a 
                                            href="{{ childlink.url }}"
                                            class="tw:block tw:text-current tw:hover:opacity-75 tw:font-bold {% if childlink.current %}{% endif %}"
                                            {% if childlink.current %}aria-current="page"{% endif %}
                                            >
                                            {{ childlink.title | escape }}
                                            </a>
                                            
                                            {%- if childlink.links != blank -%}
                                            <ul class="tw:list-none tw:mt-2 tw:mb-0 tw:p-0 tw:break-inside-avoid" role="list">
                                                {%- for grandchildlink in childlink.links -%}
                                                <li class="tw:mb-2">
                                                    <a 
                                                    href="{{ grandchildlink.url }}"
                                                    class="tw:block tw:text-current tw:hover:opacity-75 {% if grandchildlink.current %}{% endif %}"
                                                    {% if grandchildlink.current %}aria-current="page"{% endif %}
                                                    >
                                                    {{ grandchildlink.title | escape }}
                                                    </a>
                                                </li>
                                                {%- endfor -%}
                                            </ul>
                                            {%- endif -%}
                                        </div>
                                        </li>
                                    {% endfor %}
                                    </ul>
                                {%- else -%}
                                    <ul class="tw:list-none tw:p-0 tw:m-0 tw:w-full tw:h-full tw:flex-1 tw:columns-2 tw:px-[20px] tw:py-5" role="list">
                                        <li><a 
                                            href="{{ link.url }}"
                                            class="tw:block tw:text-current tw:hover:opacity-75 {% if link.current %}tw:font-bold{% endif %}"
                                            {% if link.current %}aria-current="page"{% endif %}
                                        >
                                            {{ link.title | escape }}
                                        </a></li>
                                    </ul>
                                {%- endif -%}
                                <div class="tw-main-menu-images tw:mt-auto tw:w-full tw:overflow-auto tw:snap-both tw:snap-mandatory tw-scrollbar-hidden">
                                    <div class="tw:w-fit tw:flex">
                                        {% assign menu_items_count = section.settings.menu.links | size %}
                                        {% assign blocks_per_menu = section.blocks.size | divided_by: menu_items_count %}
                                        
                                        {% for block in section.blocks %}
                                            {% assign block_index = forloop.index0 %}
                                            {% assign start_index = forloop.parentloop.index0 | times: blocks_per_menu %}
                                            {% assign end_index = start_index | plus: blocks_per_menu | minus: 1 %}

                                            {% if block_index >= start_index and block_index <= end_index %}
                                                {% assign should_display = true %}
                                            {% else %}
                                                {% assign should_display = false %}
                                            {% endif %}

                                            {% if should_display %}
                                                <div class="tw:snap-center tw:relative tw:overflow-hidden">
                                                    {% if block.type == 'tw_menu_image' %}
                                                        {% if block.settings.tw_image != blank %}
                                                            {% if block.settings.tw_title_link != blank %}
                                                            <a href="{{ block.settings.tw_title_link }}" class="tw:block tw:w-full tw:aspect-auto">
                                                            {% else %}
                                                            <div class="tw:block tw:relative tw:w-full tw:aspect-auto">
                                                            {% endif %}
                                                                {{ block.settings.tw_image | image_url: width: 800 | image_tag: class: 'tw:w-[75vw] tw:max-w-[35rem] ' }}
                                                                {% if block.settings.tw_title != blank %}
                                                                    <span class="tw:absolute tw:w-full tw:h-full tw:z-1 tw:flex tw:justify-center tw:items-center tw:top-0 tw:left-0 tw:bg-black/10">{{ block.settings.tw_title }}</span>
                                                                {% endif %}
                                                            {% if block.settings.tw_title_link != blank %}
                                                            </a>
                                                            {% else %}
                                                            </div>
                                                            {% endif %}
                                                        {% else %}
                                                            <div class="">
                                                                {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
                                                            </div>
                                                        {% endif %}
                                                    {% endif %}
                                                </div>
                                            {% endif %}
                                        {% endfor %}
                                    </div>    
                                </div>
                            </div>
                        </div>
                    {%- endfor -%}

                    
                </div>
                
            </div>
        </div>
        <button id="tw-dialog-button-{{ section.id }}" class="button tw:flex tw:items-center tw:gap-[12px] tw:p-[10px] tw:border-none tw:cursor-pointer tw-dialog-button tw:hidden!">
            <span>
                <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" class="icon icon-close tw:w-[10px]" fill="none" viewBox="0 0 18 17">
                <path d="M.865 15.978a.5.5 0 00.707.707l7.433-7.431 7.579 7.282a.501.501 0 00.846-.37.5.5 0 00-.153-.351L9.712 8.546l7.417-7.416a.5.5 0 10-.707-.708L8.991 7.853 1.413.573a.5.5 0 10-.693.72l7.563 7.268-7.418 7.417z" fill="currentColor"></path>
                </svg>
            </span>
            <span>Close</span>
        </button>
    </dialog>
</div> 

<script>

    // Start of Immediately Invoked Function Expression (IIFE) to avoid global scope pollution
    (() => {
        // Configuration object to store constant values and class names
        const CONFIG = {
            CLASSES: {
                HIDDEN: 'tw:hidden',          // Class for hidden elements
                VISIBLE: 'tw:inline-block',   // Class for visible elements
                ACTIVE: 'active',             // Class for active state
                HIDE: 'hide'                  // Class for hide animation
            },
            SWIPE: {
                THRESHOLD: 0.50,              // 50% of screen height for swipe to close
                DURATION: 500                 // Animation duration in milliseconds
            }
        };

        // Main dialog initialization function
        const twDialog = (triggerButton, closeBtn) => {
            // Find the trigger button in the DOM
            const btn = document.querySelector(triggerButton);
            if (!btn) return;  // Exit if trigger button not found

            // Cache all DOM elements for better performance
            const elements = {
                trigger: btn,                                 // Trigger button element
                parent: btn.parentNode,                      // Parent container
                triggerId: btn.parentNode.getAttribute('trigger-id'),    // Unique trigger ID
                sectionId: btn.parentNode.getAttribute("section-id"),    // Section ID
                triggerSpan: document.querySelector(triggerButton),      // Trigger span element
                hamburgerIcon: btn.querySelector('[data-icon="hamburger"]'),  // Hamburger menu icon
                closeIcon: btn.querySelector('[data-icon="close"]')          // Close icon
            };

            // Find and cache dialog content element
            elements.dialogContent = document.querySelector(
                `#tw-dialog-content-${elements.sectionId}-${elements.triggerId}`
            );
            elements.closeButton = document.querySelector(closeBtn);           // Close button
            elements.handle = elements.dialogContent?.querySelector('.tw-dialog-handle');  // Swipe handle

            // Exit if required elements are missing
            if (!elements.dialogContent || !elements.closeButton) return;

            // State object to track dialog interactions
            let state = {
                isDragging: false,        // Tracks if user is currently dragging
                touchStartY: 0,           // Starting Y position of touch/drag
                touchCurrentY: 0,         // Current Y position of touch/drag
                isAnimating: false        // Tracks if animation is in progress
            };

            // Function to toggle between hamburger and close icons
            const toggleIcons = (isOpen) => {
                const { hamburgerIcon, closeIcon } = elements;
                const { HIDDEN, VISIBLE } = CONFIG.CLASSES;

                // Toggle visibility classes for both icons
                hamburgerIcon.classList.toggle(HIDDEN, isOpen);
                hamburgerIcon.classList.toggle(VISIBLE, !isOpen);
                closeIcon.classList.toggle(HIDDEN, !isOpen);
                closeIcon.classList.toggle(VISIBLE, isOpen);
            };

            // Object containing touch event handlers
            const handleTouch = {
                // Handle touch/mouse start event
                start: (e) => {
                    if (state.isAnimating) return;  // Ignore if animation is running
                    
                    // Get starting Y position from touch or mouse event
                    state.touchStartY = e.touches?.[0]?.clientY ?? e.clientY;
                    state.isDragging = true;
                    elements.dialogContent.style.transition = 'none';  // Remove transition for smooth drag
                    elements.handle.style.cursor = 'grabbing';        // Update cursor style
                },

                // Handle touch/mouse move event
                move: (e) => {
                    if (!state.isDragging || state.isAnimating) return;
                    
                    // Get current Y position and calculate distance
                    state.touchCurrentY = e.touches?.[0]?.clientY ?? e.clientY;
                    const swipeDistance = state.touchCurrentY - state.touchStartY;
                    
                    // Apply transform only for downward swipe
                    if (swipeDistance > 0) {
                        // Calculate resistance factor for natural feel
                        const resistanceFactor = Math.min(1, swipeDistance / window.innerHeight);
                        const easedDistance = swipeDistance * (1 - resistanceFactor * 0.6);
                        elements.dialogContent.style.transform = `translateY(${easedDistance}px)`;
                    }
                },

                // Handle touch/mouse end event
                end: () => {
                    if (!state.isDragging || state.isAnimating) return;
                    
                    // Calculate total swipe distance
                    const swipeDistance = state.touchCurrentY - state.touchStartY;
                    const threshold = window.innerHeight * CONFIG.SWIPE.THRESHOLD;

                    // Close or reset based on swipe distance
                    if (swipeDistance >= threshold) {
                        finishClose();
                    } else {
                        resetDialog();
                    }

                    // Reset state
                    state.isDragging = false;
                    state.touchStartY = 0;
                    state.touchCurrentY = 0;
                }
            };

            // Function to handle closing animation
            const finishClose = () => {
                state.isAnimating = true;
                // Apply smooth closing animation
                elements.dialogContent.style.transition = 'transform 0.5s cubic-bezier(0.4, 0, 0.2, 1)';
                elements.dialogContent.style.transform = `translateY(${window.innerHeight}px)`;

                // Cleanup after animation
                setTimeout(() => {
                    document.body.classList.remove('overflow-hidden');
                    toggleIcons(false);
                    elements.dialogContent.close();
                    
                    // Reset styles
                    elements.dialogContent.style.transform = '';
                    elements.dialogContent.style.transition = '';
                    elements.handle.style.cursor = 'grab';
                    state.isAnimating = false;
                }, CONFIG.SWIPE.DURATION);
            };

            // Function to reset dialog position
            const resetDialog = () => {
                state.isAnimating = true;
                // Apply smooth reset animation
                elements.dialogContent.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
                elements.dialogContent.style.transform = 'translateY(0)';
                elements.handle.style.cursor = 'grab';

                // Reset animation state
                setTimeout(() => {
                    state.isAnimating = false;
                }, 300);
            };

            // Initialize swipe functionality
            const handleSwipeClose = () => {
                if (!elements.handle) return;

                // Add touch event listeners
                elements.handle.addEventListener('touchstart', handleTouch.start, { passive: true });
                elements.handle.addEventListener('touchmove', handleTouch.move, { passive: true });
                elements.handle.addEventListener('touchend', handleTouch.end);
                elements.handle.addEventListener('touchcancel', handleTouch.end);

                // Add mouse event listeners for desktop
                elements.handle.addEventListener('mousedown', handleTouch.start);
                window.addEventListener('mousemove', handleTouch.move);
                window.addEventListener('mouseup', handleTouch.end);
            };

            // Initialize tab system within dialog
            const initTabs = () => {
                // Cache tab-related elements
                const tabElements = {
                    buttons: elements.dialogContent.querySelectorAll('.tw-menu-tab-btn'),
                    wrapper: elements.dialogContent.querySelector('.tw-tabs-content-wrapper'),
                    contents: elements.dialogContent.querySelectorAll('.tw-tabs-content-link-list'),
                    container: elements.dialogContent.querySelector('.tw-tab-btn-container')
                };

                if (!tabElements.container) return;

                let isScrollingFromClick = false;  // Track scroll source

                // Remove existing indicator if present
                const existingIndicator = tabElements.container.querySelector('.active-tab-indicator');
                if (existingIndicator) {
                    existingIndicator.remove();
                }

                // Create new active tab indicator
                const activeIndicator = document.createElement('span');
                activeIndicator.classList.add('active-tab-indicator');
                Object.assign(activeIndicator.style, {
                    position: 'absolute',
                    bottom: '0',
                    left: '0',
                    height: '2px',
                    backgroundColor: 'currentColor',
                    transition: 'transform 0.3s ease, width 0.3s ease',
                    display: 'block'
                });
                tabElements.container.appendChild(activeIndicator);

                // Function to update indicator position
                const updateIndicator = (activeBtn) => {
                    if (!activeBtn) return;
                    
                    const width = activeBtn.offsetWidth;
                    const left = activeBtn.offsetLeft;
                    
                    activeIndicator.style.width = `${width}px`;
                    activeIndicator.style.transform = `translateX(${left}px)`;
                };

                // Function to update active tab on scroll
                const updateActiveTabOnScroll = () => {
                    if (isScrollingFromClick) return;

                    const scrollPosition = tabElements.wrapper.scrollLeft;
                    let activeIndex = 0;
                    let minDistance = Infinity;
                    
                    // Find closest tab based on scroll position
                    tabElements.contents.forEach((content, index) => {
                        const distance = Math.abs(content.offsetLeft - scrollPosition);
                        if (distance < minDistance) {
                            minDistance = distance;
                            activeIndex = index;
                        }
                    });

                    // Update active state and indicator
                    tabElements.buttons.forEach((btn, index) => {
                        if (index === activeIndex) {
                            btn.classList.add(CONFIG.CLASSES.ACTIVE);
                            updateIndicator(btn);
                        } else {
                            btn.classList.remove(CONFIG.CLASSES.ACTIVE);
                        }
                    });
                };

                // Add click handlers to tab buttons
                tabElements.buttons.forEach((btn, index) => {
                    btn.addEventListener('click', () => {
                        isScrollingFromClick = true;
                        
                        // Update active state
                        tabElements.buttons.forEach(b => b.classList.remove(CONFIG.CLASSES.ACTIVE));
                        btn.classList.add(CONFIG.CLASSES.ACTIVE);
                        updateIndicator(btn);
                        
                        // Scroll to selected tab
                        const scrollPosition = tabElements.contents[index].offsetLeft;
                        tabElements.wrapper.scrollTo({
                            left: scrollPosition,
                            behavior: 'smooth'
                        });

                        // Reset scroll tracking after animation
                        setTimeout(() => {
                            isScrollingFromClick = false;
                        }, CONFIG.SWIPE.DURATION);
                    });
                });

                // Add scroll event handler
                tabElements.wrapper.addEventListener('scroll', () => {
                    if (!isScrollingFromClick) {
                        updateActiveTabOnScroll();
                    }
                });

                // Handle window resize
                window.addEventListener('resize', () => {
                    const activeBtn = tabElements.container.querySelector('.tw-menu-tab-btn.active');
                    updateIndicator(activeBtn);
                });

                // Initialize first tab
                if (tabElements.buttons.length > 0) {
                    tabElements.buttons[0].classList.add(CONFIG.CLASSES.ACTIVE);
                    requestAnimationFrame(() => {
                        updateIndicator(tabElements.buttons[0]);
                    });
                    tabElements.wrapper.scrollLeft = 0;
                }
            };

            // Function to open dialog
            const openDialog = () => {
                elements.dialogContent.showModal();
                elements.dialogContent.classList.remove(CONFIG.CLASSES.HIDE);
                document.body.classList.add('overflow-hidden');
                toggleIcons(true);
                
                // Initialize tabs after dialog is shown
                requestAnimationFrame(initTabs);
            };

            // Function to close dialog
            const closeDialog = (fromSwipe = false) => {
                if (fromSwipe) {
                    // Simple close for swipe
                    document.body.classList.remove('overflow-hidden');
                    toggleIcons(false);
                    elements.dialogContent.close();
                    return;
                }
                
                // Animated close for button click
                elements.dialogContent.classList.add(CONFIG.CLASSES.HIDE);
                document.body.classList.remove('overflow-hidden');
                toggleIcons(false);

                // Handle animation end
                const handleAnimationEnd = () => {
                    elements.dialogContent.classList.remove(CONFIG.CLASSES.HIDE);
                    elements.dialogContent.close();
                    elements.dialogContent.removeEventListener('webkitAnimationEnd', handleAnimationEnd);
                };

                // Fallback for browsers without dialog support
                if (!('showModal' in document.createElement('dialog'))) {
                    elements.dialogContent.close();
                } else {
                    elements.dialogContent.addEventListener('webkitAnimationEnd', handleAnimationEnd);
                }
            };

            // Add main event listeners
            elements.trigger.addEventListener("click", openDialog);
            elements.closeButton.addEventListener("click", () => closeDialog());

            // Handle clicks outside dialog
            elements.dialogContent.addEventListener('click', (event) => {
                if (event.target === elements.dialogContent) {
                    closeDialog();
                    event.stopPropagation();
                }
            });

            // Handle escape key
            elements.dialogContent.addEventListener('keydown', (event) => {
                if (event.key === 'Escape') {
                    closeDialog();
                }
            });

            // Initialize dialog state
            toggleIcons(false);
            handleSwipeClose();
        };

        // Initialize dialog with section-specific selectors
        twDialog(
            '#showDialog-{{ section.id }}', 
            '#tw-dialog-button-{{ section.id }}'
        );
    })();

</script>
