{% comment %}

1. Add this schema field to header.liquid
{
    "type": "text",
    "id": "tw_menu",
    "default": "main-menu",
    "label": "TW - main menu",
    "info": "Enter your menu's handle to activate it - you can find this handle by clicking on your menu. For example: main-menu. Leave empty to deactivate."
},
add this to block
    {
        "type": "tw_menu_image",
        "name": "TW - menu image",
        "limit": 6,
        "settings": [
        {
            "type": "text",
            "id": "tw_title",
            "label": "Image title"
        },
        {
            "type": "url",
            "id": "tw_title_link",
            "label": "Title link"
        },
        {
            "type": "image_picker",
            "id": "tw_image",
            "label": "Image"
        }
    ]
}

2. Locate and update the code in header-drawer.liquid
if section.settings.menu != blank
    if section.settings.tw_menu != blank
        render 'tw-main-menu', section: section
    else 
        render 'header-drawer'
    endif
endif

{% endcomment %}

{%- style -%}
    
    :root {
        --tw-dialog-animation-duration: 0.5s;
        --tw-dialog-timing: cubic-bezier(.4,0,.2,1);
        --tw-dialog-backdrop-opacity: 0.8;
        --tw-dialog-height: 100%; 
        --tw-dialog-width: 580px;
        --tw-dialog-padding: 30px;
        --vh: 8.96px;
    }

    .tw-dialog-content *:focus-visible {
        outline: none;
        box-shadow: none;
    }

    .tw-dialog-content {
        width: var(--tw-dialog-width);
        max-width: 100%;
        margin-top: 0;
        height: 100%;
        max-height: 100%;
        top: 0;
        border: 0;
        transition: all 0.3s ease-in-out;
        left: calc(100vw - 484px);
        margin-right: 0;
        overflow: initial;
    }

    .tw-dialog-content::backdrop {
        position: fixed;
        inset: 0;
        background-color: rgb(0 0 0);
        opacity: var(--tw-dialog-backdrop-opacity);
    }

    .tw-dialog-content[open] {
        animation: var(--tw-dialog-animation-duration) var(--tw-dialog-timing) normal;
    }

    .tw-dialog-content.hide {
        animation: var(--tw-dialog-animation-duration) var(--tw-dialog-timing) normal;
    }

    .tw-dialog-content.vertical-animation[open] {
        animation-name: vertical-show;
    }

    .tw-dialog-content.vertical-animation.hide {
        animation-name: vertical-hide;
    }

    dialog.vertical-animation {
        width: 100%;
        max-width: 100%;
        height: var(--tw-dialog-height);
        max-height: calc(var(--vh,1vh)*92);
        left: 0;
        bottom: 0;
        top: auto !important;
    }

    @keyframes vertical-show {
        from { transform: translateY(110%); }
        to { transform: translateY(0); }
    }

    @keyframes vertical-hide {
        from { transform: translateY(0); }
        to { transform: translateY(110%); }
    }

    @media screen and (max-width: 767px) {
        .tw-dialog-content {
        max-width: 100%;
        right: 0;
        left: auto;
        }
    }

    .tw-dialog-button {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 10px;
        border: none;
        cursor: pointer;
    }

    .tw-dialog-button svg {
        width: 10px;
        height: 10px;
    }

    .tw-menu-icons {
        display: flex;
        align-items: center;
    }


    @media screen and (min-width: 990px) {
        .tw-main-menu {
            display: none;
        }
    }

    .tw-dialog-content {
        will-change: transform;
        backface-visibility: hidden;
        transform: translateZ(0);
    }

    .no-scrollbar::-webkit-scrollbar {
        display: none;
    }

    .no-scrollbar {
        -ms-overflow-style: none; 
        scrollbar-width: none; 
    }

    .tw-dialog-handle {
        width: 5rem;
        height: 6px;
        background-color: #ffffff4d;
        border-radius: 2px;
        margin: 8px auto;
        cursor: grab;
        position: relative;
        display: block !important;
    }

    .tw-dialog-handle-container {
        width: 100%;
        height: 20px;
        display: flex;
        justify-content: center;
        align-items: center;
        background: transparent;
        position: absolute;
        top: -21px;
        z-index: 9999;
        z-index: 10;
        touch-action: none;
    }

{%- endstyle -%}

{% liquid 
    assign dialog_id = dialog_id | plus: 1
    assign trigger_id = trigger_id | plus: 1
    assign count_tab = count_tab |  plus: 1
%}

<div class="tw-main-menu min-[990px]:tw-hidden">
    <div class="tw-menu-icons" section-id="{{ section.id }}" trigger-id="{{ trigger_id }}">
        <span id="showDialog-{{ section.id }}">
            <span data-icon="hamburger" class="[&>svg]:tw-h-8 [&>svg]:tw-w-8 [&>svg]:tw-fill-none [&>svg]:tw-align-middle tw-inline-block">
                {{- 'icon-hamburger.svg' | inline_asset_content -}}
            </span>
            <span data-icon="close" class="[&>svg]:tw-h-8 [&>svg]:tw-w-8 [&>svg]:tw-fill-none [&>svg]:tw-align-middle tw-hidden">
                {{- 'icon-close.svg' | inline_asset_content -}}
            </span>
        </span>
    </div>
    <dialog id="tw-dialog-content-{{ section.id }}-{{dialog_id}}" class="tw-w-[580px] !tw-mt-0 tw-h-full tw-max-h-full tw-top-0 tw-border-0 tw-transition tw-ease-in-out tw-duration-300 tw-left-[calc(100vw-484px)] tw-mr-0 max-sm:tw-max-w-full max-sm:tw-right-0 max-sm:tw-left-auto tw-dialog-content vertical-animation gradient color-{{ section.settings.tw_menu_color_scheme }}" dialog_id="{{dialog_id}}" close>
        <div class="tw-dialog-handle-container">
            <div class="tw-dialog-handle"></div>
        </div>
        <div class="tw-menu-tabs-container tw-w-full tw-h-full tw-overflow-hidden">
            <div class="tw-tab-btn-container tw-relative tw-flex tw-justify-space-evenly tw-relative tw-w-full tw-overflow-x-hidden">
                {%- for link in section.settings.menu.links -%}
                    {% assign tab_id = link.handle | append: '-' | append: count_tab | append: '-' | append: forloop.index0 %}
                    <button 
                        class="tw-menu-tab-btn tw-cursor-pointer tw-py-[10px] tw-px-[20px] tw-basis-full"
                        data-tab="tab-{{ tab_id }}" tab-index="-1">
                        {{ link.title | escape }}
                    </button>
                   
                {%- endfor -%}
            </div>
            <div class="tw-tab-contents tw-w-full tw-h-full tw-overflow-auto tw-scroll-smooth no-scrollbar">
                <div class="tw-tabs-content-wrapper tw-w-full tw-flex tw-overflow-auto tw-overscroll-none tw-snap-both tw-snap-mandatory tw-scroll-smooth no-scrollbar">
                   
                    {%- for link in section.settings.menu.links -%}
                        <div class="tw-tabs-content-link-list tw-w-full tw-snap-center">
                            {% assign tab_id = link.handle | append: '-' | append: count_tab | append: '-' | append: forloop.index0 %}
                            <div id="tab-{{ tab_id }}" class="tw-menu-tab-content tw-w-full tw-h-full tw-flex tw-flex-col">
                                {%- if link.links != blank -%}
                                    <ul class="tw-list-none tw-p-0 tw-m-0 tw-w-full tw-h-full tw-flex-1 tw-columns-2 tw-px-[20px] tw-py-5" role="list">
                                    {% for childlink in link.links %}
                                        <li class="">
                                        <div class="tw-py-4 tw-px-1 tw-break-inside-avoid">
                                            <a 
                                            href="{{ childlink.url }}"
                                            class="tw-block tw-text-current hover:tw-opacity-75 tw-font-bold {% if childlink.current %}{% endif %}"
                                            {% if childlink.current %}aria-current="page"{% endif %}
                                            >
                                            {{ childlink.title | escape }}
                                            </a>
                                            
                                            {%- if childlink.links != blank -%}
                                            <ul class="tw-list-none tw-mt-2 tw-mb-0 tw-p-0 tw-break-inside-avoid" role="list">
                                                {%- for grandchildlink in childlink.links -%}
                                                <li class="tw-mb-2">
                                                    <a 
                                                    href="{{ grandchildlink.url }}"
                                                    class="tw-block tw-text-current hover:tw-opacity-75 {% if grandchildlink.current %}{% endif %}"
                                                    {% if grandchildlink.current %}aria-current="page"{% endif %}
                                                    >
                                                    {{ grandchildlink.title | escape }}
                                                    </a>
                                                </li>
                                                {%- endfor -%}
                                            </ul>
                                            {%- endif -%}
                                        </div>
                                        </li>
                                    {% endfor %}
                                    </ul>
                                {%- else -%}
                                    <div class="tw-py-4 tw-px-1">
                                    <a 
                                        href="{{ link.url }}"
                                        class="tw-block tw-text-current hover:tw-opacity-75 {% if link.current %}tw-font-bold{% endif %}"
                                        {% if link.current %}aria-current="page"{% endif %}
                                    >
                                        {{ link.title | escape }}
                                    </a>
                                    </div>
                                {%- endif -%}
                                <div class="tw-main-menu-images tw-mt-auto tw-w-full  tw-overflow-auto tw-snap-both tw-snap-mandatory tw-scrollbar-hidden">
                                    <div class="tw-w-fit tw-flex">
                                        {% assign total_blocks = section.blocks.size %}
                                        {% assign half_blocks = total_blocks | divided_by: 2 %}
                        
                                        {% for block in section.blocks %}
                                            {% assign block_index = forloop.index0 %}
                                            {% if forloop.first %}
                                                {% assign tab_index = 0 %}
                                            {% endif %}
                        
                                            {% if forloop.index0 < 3 and forloop.parentloop.index0 == 0 %}
                                                {% assign should_display = true %}
                                        
                                            {% elsif forloop.index0 >= 3 and forloop.parentloop.index0 == 1 %}
                                                {% assign should_display = true %}
                                            {% else %}
                                                {% assign should_display = false %}
                                            {% endif %}
                        
                                            {% if should_display %}
                                                <div class="tw-snap-center tw-relative tw-overflow-hidden">
                                                    {% if block.type == 'tw_menu_image' %}
                                                        {% if block.settings.tw_image != blank %}
                                                            {% if block.settings.tw_title_link != blank %}
                                                            <a href="{{ block.settings.tw_title_link }}" class="tw-block tw-w-full tw-aspect-auto">
                                                            {% else %}
                                                            <div class="tw-block tw-relative tw-w-full tw-aspect-auto">
                                                            {% endif %}
                                                                {{ block.settings.tw_image | image_url: width: 800 | image_tag: class: 'tw-w-[75vw] tw-max-w-[35rem] ' }}
                                                                {% if block.settings.tw_title != blank %}
                                                                    <span class="tw-absolute tw-w-full tw-h-full tw-z-[1] tw-flex tw-justify-center tw-items-center tw-top-0 tw-left-0 tw-bg-black tw-bg-opacity-10">{{ block.settings.tw_title }}</span>
                                                                {% endif %}
                                                            {% if block.settings.tw_title_link != blank %}
                                                            </a>
                                                            {% else %}
                                                            </div>
                                                            {% endif %}
                                                        {% else %}
                                                            <div class="">
                                                                {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
                                                            </div>
                                                        {% endif %}
                                                    {% endif %}
                                                </div>
                                            {% endif %}
                                        {% endfor %}
                                    </div>    
                                </div>
                            </div>
                        </div>
                    {%- endfor -%}
                    
                </div>
                
            </div>
        </div>
        <button id="tw-dialog-button-{{ section.id }}" class="button tw-flex tw-items-center tw-gap-[12px] tw-p-[10px] tw-border-none tw-cursor-pointer tw-dialog-button !tw-hidden">
            <span>
                <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" class="icon icon-close tw-w-[10px]" fill="none" viewBox="0 0 18 17">
                <path d="M.865 15.978a.5.5 0 00.707.707l7.433-7.431 7.579 7.282a.501.501 0 00.846-.37.5.5 0 00-.153-.351L9.712 8.546l7.417-7.416a.5.5 0 10-.707-.708L8.991 7.853 1.413.573a.5.5 0 10-.693.72l7.563 7.268-7.418 7.417z" fill="currentColor"></path>
                </svg>
            </span>
            <span>Close</span>
        </button>
    </dialog>
</div> 

<script>

    (() => {
        const twDialog = (triggerButton, closeBtn) => {
            const btn = document.querySelector(triggerButton);
            if (!btn) return;

            const triggerId = btn.parentNode.getAttribute('trigger-id');
            const triggerSectionId = btn.parentNode.getAttribute("section-id");
            const dialogContent = document.querySelector(`#tw-dialog-content-${triggerSectionId}-${triggerId}`);
            const closeButton = document.querySelector(closeBtn);
            
            if (!dialogContent || !closeButton) return;

            const triggerSpan = document.querySelector(triggerButton);
            const hamburgerIcon = triggerSpan.querySelector('[data-icon="hamburger"]');
            const closeIcon = triggerSpan.querySelector('[data-icon="close"]');
            

            const handleSwipeClose = () => {
                const handle = dialogContent.querySelector('.tw-dialog-handle');
                if (!handle) return;

                let touchStartY = 0;
                let touchCurrentY = 0;
                const CLOSE_THRESHOLD = window.innerHeight * 0.50; // 50% of screen height
                let isDragging = false;

                handle.addEventListener('touchstart', (e) => {
                    touchStartY = e.touches[0].clientY;
                    isDragging = true;
                    dialogContent.style.transition = 'none';
                    handle.style.cursor = 'grabbing';
                }, { passive: true });

                const updateDialogPosition = (yPosition) => {
                    const swipeDistance = yPosition - touchStartY;
                    if (swipeDistance > 0) {
                        const resistanceFactor = Math.min(1, swipeDistance / window.innerHeight);
                        const easedDistance = swipeDistance * (1 - resistanceFactor * 0.6);
                        dialogContent.style.transform = `translateY(${easedDistance}px)`;
                    }
                };

                handle.addEventListener('touchmove', (e) => {
                    if (!isDragging) return;
                    touchCurrentY = e.touches[0].clientY;
                    updateDialogPosition(touchCurrentY);
                }, { passive: true });

                const finishClose = () => {
                    
                    dialogContent.style.transition = 'transform 0.5s cubic-bezier(0.4, 0, 0.2, 1)';
                    dialogContent.style.transform = `translateY(${window.innerHeight}px)`;

                    setTimeout(() => {
                        document.body.classList.remove('overflow-hidden');
                        toggleIcons(false);
                        dialogContent.close();
                        
                        dialogContent.style.transform = '';
                        dialogContent.style.transition = '';
                        handle.style.cursor = 'grab';
                    }, 500); 
                };

                const resetDialog = () => {
                    dialogContent.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
                    dialogContent.style.transform = 'translateY(0)';
                    handle.style.cursor = 'grab';
                };

                handle.addEventListener('touchend', () => {
                    if (!isDragging) return;
                    isDragging = false;

                    const swipeDistance = touchCurrentY - touchStartY;
                    
                    if (swipeDistance >= CLOSE_THRESHOLD) {
                        finishClose();
                    } else {
                        resetDialog();
                    }
                    
                    touchStartY = 0;
                    touchCurrentY = 0;
                });

                let isMouseDragging = false;

                handle.addEventListener('mousedown', (e) => {
                    isMouseDragging = true;
                    touchStartY = e.clientY;
                    dialogContent.style.transition = 'none';
                    handle.style.cursor = 'grabbing';
                });

                window.addEventListener('mousemove', (e) => {
                    if (!isMouseDragging) return;
                    touchCurrentY = e.clientY;
                    updateDialogPosition(touchCurrentY);
                });

                window.addEventListener('mouseup', () => {
                    if (!isMouseDragging) return;
                    isMouseDragging = false;

                    const swipeDistance = touchCurrentY - touchStartY;
                    
                    if (swipeDistance >= CLOSE_THRESHOLD) {
                        finishClose();
                    } else {
                        resetDialog();
                    }
                    
                    touchStartY = 0;
                    touchCurrentY = 0;
                });

                handle.addEventListener('touchcancel', () => {
                    isDragging = false;
                    resetDialog();
                    touchStartY = 0;
                    touchCurrentY = 0;
                });
            };

            const toggleIcons = (isOpen) => {
                if (isOpen) {
                    hamburgerIcon.classList.remove('tw-inline-block');
                    hamburgerIcon.classList.add('tw-hidden');
                    closeIcon.classList.remove('tw-hidden');
                    closeIcon.classList.add('tw-inline-block');
                } else {
                    hamburgerIcon.classList.remove('tw-hidden');
                    hamburgerIcon.classList.add('tw-inline-block');
                    closeIcon.classList.remove('tw-inline-block');
                    closeIcon.classList.add('tw-hidden');
                }
            };

            toggleIcons(false);

            const initTabs = () => {
                const tabBtns = dialogContent.querySelectorAll('.tw-menu-tab-btn');
                const tabsWrapper = dialogContent.querySelector('.tw-tabs-content-wrapper');
                const tabContents = dialogContent.querySelectorAll('.tw-tabs-content-link-list');
                let isScrollingFromClick = false;

                const tabBtnContainer = dialogContent.querySelector('.tw-tab-btn-container');
                if (!tabBtnContainer) return;

                const existingIndicator = tabBtnContainer.querySelector('.active-tab-indicator');
                if (existingIndicator) {
                    existingIndicator.remove();
                }

                const activeIndicator = document.createElement('span');
                activeIndicator.classList.add('active-tab-indicator');
                Object.assign(activeIndicator.style, {
                    position: 'absolute',
                    bottom: '0',
                    left: '0',
                    height: '2px',
                    backgroundColor: 'currentColor',
                    transition: 'transform 0.3s ease, width 0.3s ease',
                    display: 'block'
                });
                tabBtnContainer.appendChild(activeIndicator);

                function updateIndicator(activeBtn) {
                    if (!activeBtn) return;
                    
                    const width = activeBtn.offsetWidth;
                    const left = activeBtn.offsetLeft;
                    
                    activeIndicator.style.width = `${width}px`;
                    activeIndicator.style.transform = `translateX(${left}px)`;
                }

                tabBtns.forEach((btn, index) => {
                    btn.addEventListener('click', () => {
                        isScrollingFromClick = true;
                        
                        tabBtns.forEach(b => b.classList.remove('active'));
                        btn.classList.add('active');
                        updateIndicator(btn);
                        
                        const scrollPosition = tabContents[index].offsetLeft;
                        
                        tabsWrapper.scrollTo({
                            left: scrollPosition,
                            top: 0,
                            behavior: 'smooth'
                        });

                        setTimeout(() => {
                            isScrollingFromClick = false;
                        }, 500);
                    });
                });

                tabsWrapper.addEventListener('scroll', () => {
                    if (!isScrollingFromClick) {
                        updateActiveTabOnScroll();
                    }
                });

                function updateActiveTabOnScroll() {
                    const scrollPosition = tabsWrapper.scrollLeft;
                    
                    let activeIndex = 0;
                    let minDistance = Infinity;
                    
                    tabContents.forEach((content, index) => {
                        const distance = Math.abs(content.offsetLeft - scrollPosition);
                        if (distance < minDistance) {
                            minDistance = distance;
                            activeIndex = index;
                        }
                    });

                    tabBtns.forEach((btn, index) => {
                        if (index === activeIndex) {
                            btn.classList.add('active');
                            updateIndicator(btn);
                        } else {
                            btn.classList.remove('active');
                        }
                    });
                }

                if (tabBtns.length > 0) {
                    tabBtns.forEach(btn => btn.classList.remove('active'));
                    tabBtns[0].classList.add('active');
                   
                    requestAnimationFrame(() => {
                        updateIndicator(tabBtns[0]);
                    });
                    tabsWrapper.scrollLeft = 0;
                }
            };

            const openDialog = () => {
                dialogContent.removeAttribute('close');
                dialogContent.showModal();
                dialogContent.classList.remove('hide');
                document.body.classList.add('overflow-hidden');
                toggleIcons(true);

                
                requestAnimationFrame(() => {
                    initTabs();
                    handleSwipeClose();
                });
            };

            const closeDialog = (fromSwipe = false) => {
                if (fromSwipe) {
                    document.body.classList.remove('overflow-hidden');
                    toggleIcons(false);
                    dialogContent.close();
                    return;
                }
                
                dialogContent.classList.add('hide');
                document.body.classList.remove('overflow-hidden');
                toggleIcons(false);

                const handleAnimationEnd = () => {
                    dialogContent.classList.remove('hide');
                    dialogContent.close();
                    dialogContent.removeEventListener('webkitAnimationEnd', handleAnimationEnd);
                };

                if (!('showModal' in document.createElement('dialog'))) {
                    dialogContent.close();
                } else {
                    dialogContent.addEventListener('webkitAnimationEnd', handleAnimationEnd);
                }
            };

            btn.addEventListener("click", openDialog);
            closeButton.addEventListener("click", closeDialog);

            dialogContent.addEventListener('click', (event) => {
                if (event.target === dialogContent) {
                    closeDialog();
                    event.stopPropagation();
                }
            });

            dialogContent.addEventListener('keydown', (event) => {
                if (event.key === 'Escape') {
                    closeDialog();
                }
            });

        };

        twDialog(
            '#showDialog-{{ section.id }}', 
            '#tw-dialog-button-{{ section.id }}'
        );
        
    })();

    (() => {
        document.addEventListener('DOMContentLoaded', () => {
            const tabBtns = document.querySelectorAll('.tab-btn');
            const tabsWrapper = document.querySelector('.tw-tabs-content-wrapper');
            const tabContents = document.querySelectorAll('.tw-tabs-content-link-list');

            let isScrollingFromClick = false;

            const tabBtnContainer = document.querySelector('.tw-tab-btn-container');
            const activeIndicator = document.createElement('span');
            activeIndicator.classList.add('active-tab-indicator');
            Object.assign(activeIndicator.style, {
                position: 'absolute',
                bottom: '0',
                left: '0',
                height: '2px',
                backgroundColor: 'currentColor',
                transition: 'transform 0.3s ease, width 0.3s ease',
                display: 'block'
            });
            tabBtnContainer.appendChild(activeIndicator);

            function updateIndicator(activeBtn) {
                if (!activeBtn) return;
                
                const width = activeBtn.offsetWidth;
                const left = activeBtn.offsetLeft;
                
                activeIndicator.style.width = `${width}px`;
                activeIndicator.style.transform = `translateX(${left}px)`;
            }

            tabBtns.forEach((btn, index) => {
                btn.addEventListener('click', () => {
                    isScrollingFromClick = true;
                    
                    tabBtns.forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                    updateIndicator(btn);
                    
                    const scrollPosition = tabContents[index].offsetLeft;
                    
                    tabsWrapper.scrollTo({
                        left: scrollPosition,
                        top: 0,
                        behavior: 'smooth'
                    });

                    setTimeout(() => {
                        isScrollingFromClick = false;
                    }, 500);
                });
            });

            tabsWrapper.addEventListener('scroll', () => {
                if (!isScrollingFromClick) {
                    updateActiveTabOnScroll();
                }
            });

            tabsWrapper.addEventListener('wheel', (e) => {
                if (e.deltaY !== 0) {
                    e.preventDefault();
                    tabsWrapper.scrollLeft += e.deltaY;
                    if (!isScrollingFromClick) {
                        updateActiveTabOnScroll();
                    }
                }
            });

            function updateActiveTabOnScroll() {
                const scrollPosition = tabsWrapper.scrollLeft;
                
                let activeIndex = 0;
                let minDistance = Infinity;
                
                tabContents.forEach((content, index) => {
                    const distance = Math.abs(content.offsetLeft - scrollPosition);
                    if (distance < minDistance) {
                        minDistance = distance;
                        activeIndex = index;
                    }
                });

                tabBtns.forEach((btn, index) => {
                    if (index === activeIndex) {
                        btn.classList.add('active');
                        updateIndicator(btn);
                    } else {
                        btn.classList.remove('active');
                    }
                });
            }

            window.addEventListener('resize', () => {
                const activeBtn = document.querySelector('.tw-menu-tab-btn.active');
                updateIndicator(activeBtn);
            });

            updateIndicator(tabBtns[0]);
            tabBtns[0].classList.add('active');
        });
    })(); 

</script>
